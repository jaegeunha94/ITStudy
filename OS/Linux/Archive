# 아카이브
* 아카이브는 여러가지 목적이 있지만 전통적으로 사용된 용도는 파일의 저장용도로 사용되었다
* 압축이 아니라 용량이 줄지 않음
* 테이프 장치에 보관하여 백업하거나 여러 파일을 하나의 파일로 묶어서 보관
* 현재는 파일을 저장핼 때 뿐 아니라 여러 파일을 하나의 파일로 묶을 때도 사용
* 일반적으로 프로그램을 tar 아카이브 후 gzip 압축한 형태로 배포하는 경우가 많다


# tar 명령어
* tar는 아카이브를 위한 명령어입니다. 복수의 파일이나 디렉터리를 아카이브 파일 하나로 모으거나 반대로 복원하기 위해 사용한다.
* tar [기능] [아카이브 파일] [묶음 파일1] [묶음 파일2] [묶음 파일3]

## ❗파일 속성 유지하기
tar는 `파일의 권한, 소유자, 타임스탬프 같은 파일의 속성`을 유지한 채로 아카이브한다.  
따라서 단순히 cp로 파일을 복사하는 것보다 백업에 적합하다.

하지만 일반 사용자로 tar을 실행한다면 권한 부족으로 파일의 속성을 유지하지 못할 수도 있다.  
예를 들어 소유자가 root이고 소유자에게만 읽기 권한이 부여된 파일에 대해서는 일반 사용자가 아카이브할 수 없으며  
그러한 파일이 포함된 아카이브를 복원하면 속성이 올바로 복원되지 않을 수도 있다.

따라서 디렉터리를 온전히 백업하기 위해서는 `슈퍼 사용자 권한`으로 tar을 실행해야 한다.

## 기능
* -c: 새로운 아카이브 파일을 생성
* -x: 아카이브 파일에서 여러 파일을 해체
* -t: 아카이브 파일에서 안의 내용을 조회
* -v: verbose: 명령어 수행과정을 자세히 출력
* -f: 아카이브 장치 지정(파일 또는 백업 장치를 지정)

### v 옵션
* 그저 수행과정 자세히 출력하는 것 뿐

### t 옵션과 v 옵션을 함께 지정하여 아카이브 파일의 상세 정보 출력
그리고 t 옵션으로 아카이브 파일의 내용을 확인할 때 v 옵션을 추가하면 파일 이름뿐만 아니라  
권한이나 소유자 등의 상세 정보도 함께 출력할 수 있다.

`$ tar tvf dir1.tar`


## ❗ 아카이브에서 v 옵션 사용했을 때 주의할 점
아카이브를 작성하거나 복원할 때 v 옵션을 사용하는 것에 대해서는 논란의 여지가 있다.  
에러 메시지를 확인하기 어렵기 때문이다.

아카이브를 만들거나 복원할 때는 권한 문제 등으로 에러가 발생할 수 있다.  
이때 대상 파일의 개수가 많으면 에러 메시지가 눈에 띄지 않게 된다.  
따라서 기본적으로 t 옵션에서만 v 옵션을 사용하는 것이 좋다.

또한, 아카이브 파일은 만들어지는 과정에서 파손되는 경우도 있으므로  
모든 파일이 제대로 아카이브되었는지 확인하려면 만들어진 파일에 대해 t 옵션으로 확인하는 것이 더 확실하다.

## 아카이브 생성
* tar cvf fruts.tar banana apple kiwki

### 절대경로 아커이브
* `절대경로로 아카이브`하면 폴더 안에 묶임

## 아카이브 해제
* tar xvf fruits.tar


# zip, unzip 명령어
* 일반적으로 윈도우와 같이 많이 쓰는 명령어
* 여러개의 파일을 아카이브로 묶은후 압축

　| 압축|압축 해제
---|---|---
zip|zip [압축 파일 이름] [압축할 파일 이름] | unzip [압축 파일 이름]
gzip | gzip [압축 파일 이름] | gunzip [압축 파일 이름]
bzip2 | bzip2 [압축 파일 이름] | bunzip2 [압축 파일 이름]


# 압축, 아카이브 한번에 풀기
* `tar zxvf [파일명].tar.gz`

# 압축 파일 복원
압축한 파일을 복원하려면 -d 옵션을 지정한다.

`$ gzip -d ps.txt.gz`

## gunzip
gunzip 명령어를 사용해도 압축을 해제할 수 있다.  
gzip -d와 gunzip은 동일한 동작을 수행하므로 선호하는 명령어를 사용하면 된다.

`$ gunzip ps.txt.gz`

gunzip은 셸 스크립트이며 내부적으로 gzip -d를 실행한다.  
다음과 같이 less 명령어로 gunzip의 소스 코드를 확인할 수 있다.

`$ less $(which gunzip)`


## 표준 출력에 gzip 파일 출력하기
gzip의 -c 옵션을 사용하면 압축 결과를 바이너리 형태로 표준 출력에 출력할 수 있다.  
그리고 표준 출력을 리다이렉션하면 다음과 같이 임의의 이름으로 압축 파일을 만들 수 있다.

⦿ 임의의 이름으로 압축 파일 생성
`$ gzip -c ps.txt > ps_test.txt.gz`


# tar와 gzip 조합하기
gzip 명령어는 아카이브 기능이 없으며 파일 하나만 압축할 수 있다.  
따라서 파일 여러 개를 묶어서 압축하려면 tar로 아카이브한 뒤에 gzip을 사용해야 한다.

최근 tar 명령어에는 gzip의 압축 기능을 포함하고 있어서 gzip을 사용하지 않고도  
tar만으로도 tar + gz 파일을 만들 수 있습니다.  
tar 명령어로 아카이브할 때 c 옵션과 함께 z 옵션을 추가하면 압축까지 수행한다.


## ⦿ tar 명령어로 tar + gz 형식으로 파일 작성
`$ tar czf dir1.tar.gz dir1`
  
그리고 tar + gz 파일을 복원하려면 다음과 같이 x 옵션과 함께 z 옵션을 지정해야 한다.


## tar 명령어로 tar + gz 형식의 파일 복원
`$ tar xzf dir1.tar.gz`
  
이처럼 tar 명령어를 사용할 때 z 옵션을 사용하면  
tar + gz 형식으로 압축과 아카이브를 함께 수행할 수 있다.


# 🔖bzip
bzip2는 gzip과 마찬가지로 파일을 압축하고 해제하는 명령어다.  
bzip2는 gzip보다 압축률이 높아 데이터를 더 작게 만들 수 있다.  
하지만 압축과 해제하는 데 걸리는 시간이 gzip보다 더 오래 걸린다.  
따라서 압축하고 해제하는 데 걸리는 시간보다 파일 크기를 줄이는 것이 더 중요한 상황에서 많이 사용된다.

bzip2는 gzip과 동일한 옵션으로 동작하도록 설계되었다.  
따라서 gzip의 사용법을 안다면 bzip2도 어렵지 않게 사용할 수 있다.


## bzip2로 파일 압축
` bzip2 <압축할 파일>`
  
  
##  bzip2로 압축 수행
`$ bzip2 ps.txt`


# 🔖zip
zip은 tar이나 gzip과 달리 아카이브와 압축을 동시에 수행하는 명령어다.  
여러 파일과 디렉터리를 파일 하나로 압축할 수 있습니다. 확장자로는 .zip이 붙는다.

zip은 리눅스에서는 별로 사용되지 않지만 윈도나 macOS에서 많이 사용되고 있어  
리눅스에서도 다루는 방법을 알아 두는 것이 좋다.

리눅스에서 zip 파일을 다루려면 zip 명령어와 unzip 명령어를 설치해야 한다.  
이들 명령어는 대부분의 배포판에서 표준으로 설치되어 있지 않으니  
다음과 같이 별도로 설치해야 한다.

## zip 파일 작성
`zip -r <압축 결과의 파일 이름> <압축 대상의 경로>`
  
다음은 dir1이라는 디렉터리를 dir1.zip이라는 파일로 압축하고 있다.


## dir1 디렉터리를 zip으로 압축
`$ zip -r dir1.zip dir1`

여기서 -r 옵션은 지정한 디렉터리 아래의 모든 파일을 포함하는 옵션이다.  
-r 옵션을 지정하지 않으면 디렉터리만 대상이 되어 그 안의 파일은 포함되지 않는다.  
그렇게 압축할 일은 없으므로 zip 파일을 만들 때는 늘 -r 옵션을 지정한다고 생각하면 된다.

압축된 zip 파일을 확인하려면 zipinfo라는 명령어를 사용한다.  
이 명령어는 unzip 패키지에 포함되어 있다.


## 압축 해제
그리고 압축한 zip 파일을 복원하려면 unzip 명령어를 사용해야 한다.

`$ unzip dir1.zip`


## zip 옵션
zip 명령어의 경우 압축을 수행할 때 대상이 되는 파일 이름이 기본으로 출력된다.  
파일 개수가 많아 파일 이름을 출력하지 않을 때는 -q 옵션을 지정하면 된다.


### 대상 파일 이름을 출력하지 않으면서 zip 파일 작성
`$ zip -rq dir1.zip dir1`
  

마찬가지로 unzip 명령어를 사용할 때도 -q 옵션을 지정하면  
파일 이름이 출력되지 않는다.

   
### 대상 파일 이름을 출력하지 않고 unzip 수행
`$ unzip -q dir1.zip`



# 참조
[따라하면서배우는IT 유튜브](https://www.youtube.com/watch?v=I8mWMXahAIg&list=PL0d8NnikouEVcV3eb4hKvH5BccI2AaVGJ&index=36)
